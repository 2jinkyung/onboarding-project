server:
  port: 8080
  tomcat:
    threads:
      max: 50 # 값을 넘으면 대기 큐로 넘어감
      min-spare: 5 #평상시 대기하는 스레드 수

    # 최대 연결 대기 큐 크기, 해당 큐 다 차면 'Connection Refused' 에러
    accept-count: 100

    connection-timeout: 20000
spring:
  datasource:
    url: #${DB_URL}
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: #${DB_USERNAME}
    password: #${DB_PASSWORD}
    hikari:
      connection-timeout: 3000 # 스레드가 hikari에 connection을 요청하고,대기하는 최대시간
      pool-name: HikariCP
      auto-commit: false # 보통 read-only는 true, writer는 false
      connection-test-query: SELECT 1 # 새로운 커넥션을 주기 전 DB 헬스체크 하는 쿼리
      validation-timeout: 2000 # 새로운 커넥션을 주기 전 DB 헬스체크 timeout 시간, 참고로 connection-init-sql에도 같이 적용됨
      minimum-idle: 10 # 풀에서 유지되는 최소한의 유휴 커넥션 수.
      maximum-pool-size: 50
      idle-timeout: 30000 # 커넥션이 유휴 상태인 최대 시간(밀리초), DB 자체 커넥션 수가 부족하면 시간 줄여야함
      max-lifetime: 50000  # 풀에 커넥션이 생성된 후 있을 수 있는 최대시간 (밀리초), DB 자체 커넥션 수가 부족하면 시간 줄여야함
  h2:
    console:
      enabled: false
  jpa:
    database-platform: org.hibernate.dialect.MySQL5Dialect	# 이 부분 주의!
    properties:
      hibernate:
        show-sql: true
        format-sql: true
        dialect.storage_engine: innodb
    hibernate:
      ddl-auto: create	#update